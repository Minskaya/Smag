<Window x:Name="MyWindow"
    x:Class="darshitdaveCombo.daveWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:darshitdaveCombo"
    xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
    Title="MainWindow"
    Width="525"
    Height="350">
    <Window.Resources>

        <!--  Fill Brushes, which are required by the control template of combo box - so we have copied them.  -->
        <local:HeightConverter x:Key="MyHeightConverter" />
        <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#FFF" />
                    <GradientStop Offset="1.0" Color="#CCC" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#FFF" />
                    <GradientStop Offset="1.0" Color="#CCC" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#FFF" />
                    <GradientStop Offset="1.0" Color="#EEE" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#FFF" />
                    <GradientStop Offset="1.0" Color="#EEE" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#FFF" />
                    <GradientStop Offset="1.0" Color="#AAA" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#BBB" />
                    <GradientStop Offset="0.1" Color="#EEE" />
                    <GradientStop Offset="0.9" Color="#EEE" />
                    <GradientStop Offset="1.0" Color="#FFF" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="DisabledForegroundBrush"
            Color="#888" />
        <SolidColorBrush x:Key="DisabledBackgroundBrush"
            Color="#EEE" />
        <SolidColorBrush x:Key="WindowBackgroundBrush"
            Color="#FFF" />
        <SolidColorBrush x:Key="SelectedBackgroundBrush"
            Color="#DDD" />
        <!--  Border Brushes  -->
        <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#CCC" />
                    <GradientStop Offset="1.0" Color="#444" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#CCC" />
                    <GradientStop Offset="1.0" Color="#444" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#777" />
                    <GradientStop Offset="1.0" Color="#000" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#444" />
                    <GradientStop Offset="1.0" Color="#888" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="DisabledBorderBrush"
            Color="#AAA" />
        <SolidColorBrush x:Key="SolidBorderBrush"
            Color="#888" />
        <SolidColorBrush x:Key="LightBorderBrush"
            Color="#AAA" />
        <!--  Miscellaneous Brushes  -->
        <SolidColorBrush x:Key="GlyphBrush"
            Color="#444" />
        <SolidColorBrush x:Key="LightColorBrush"
            Color="#DDD" />
        <!--
            This is the default toggle button style - we have not played it with it, just leave it as it is.
            If you wish, then you can change the expanded and collapsed image of this button too.
        -->
        <ControlTemplate x:Key="ExpanderToggleButton"
            TargetType="{x:Type ToggleButton}">
            <Border x:Name="Border"
                Background="Transparent"
                BorderBrush="{StaticResource NormalBorderBrush}"
                BorderThickness="0,0,0,0"
                CornerRadius="2,0,0,0">
                <Path x:Name="Arrow"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M 0 0 L 4 4 L 8 0 Z"
                    Fill="{StaticResource GlyphBrush}" />
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="Arrow" Property="Data" Value="M 0 4 L 4 0 L 8 4 Z" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                    <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource DisabledForegroundBrush}" />
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="{x:Type Expander}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="ContentRow" />
                            </Grid.RowDefinitions>
                            <Border x:Name="Border"
                                Grid.Row="0"
                                Background="{StaticResource WindowBackgroundBrush}"
                                BorderBrush="{StaticResource NormalBorderBrush}"
                                BorderThickness="0,0,0,0"
                                CornerRadius="2,2,0,0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="20" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Grid.Column="0">
                                        <!--
                                            We have modified this grid to have Group name i.e. ContentPresenter and than
                                            a line upto the expand/collapse button.
                                        -->
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <!--  This content presenter will have value of 'Header' which in our case is group name.  -->
                                        <ContentPresenter
                                            Grid.Column="0"
                                            Margin="2"
                                            ContentSource="Header"
                                            RecognizesAccessKey="True" />
                                        <Line
                                            Grid.Column="1"
                                            Stretch="Fill"
                                            Stroke="DimGray"
                                            X1="0"
                                            X2="1"
                                            Y1="0"
                                            Y2="0" />
                                    </Grid>
                                    <!--
                                        Here, we have played a bit, to move the toggle button to expand
                                        and collapse the group to the right corner of the group header,
                                        so we placed this button in column 1 instead of column 0.
                                    -->
                                    <ToggleButton
                                        Grid.Column="1"
                                        Background="{StaticResource NormalBrush}"
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        OverridesDefaultStyle="True"
                                        Template="{StaticResource ExpanderToggleButton}" />
                                </Grid>
                            </Border>
                            <Border x:Name="Content"
                                Grid.Row="1"
                                Background="{StaticResource WindowBackgroundBrush}"
                                BorderBrush="{StaticResource SolidBorderBrush}"
                                BorderThickness="0,0,0,0"
                                CornerRadius="0,0,2,2">
                                <!--
                                    This is border, in which the entire content is placed, and we need to play with height of this border
                                    in order to dispaly only desired number of items when group is collapsed. We have defined height converter class
                                    in our project. We are passing the Content and NumberOfItems to this converter using multibinding.
                                -->
                                <Border.Height>
                                    <MultiBinding Converter="{StaticResource MyHeightConverter}">
                                        <Binding
                                            ElementName="ComboExpander"
                                            Path="Content" />
                                        <Binding
                                            ElementName="MyWindow"
                                            Path="NumberOfItems" />
                                    </MultiBinding>
                                </Border.Height>
                                <ContentPresenter Margin="10,2,0,0" />
                            </Border>
                        </Grid>
                        <!--  This is regular expand button and we have left it as it was.  -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter TargetName="Content" Property="Height" Value="{Binding DesiredHeight, ElementName=Content}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <CollectionViewSource x:Key="GroupedData"
            Source="{Binding URLs}">
            <!--  Here we are specifying on which field of collection item should be grouped  -->
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="GroupName" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>
        <!--  Here we tell that the Header of each group should be displaying the group name  -->
        <DataTemplate x:Key="GroupHeader">
            <TextBlock
                Margin="10,0,0,0"
                Foreground="#989791"
                Text="{Binding Name}" />
        </DataTemplate>
        <!--  Here, we tell that the URL's description should be displayed as item text.  -->
        <DataTemplate x:Key="URLTemplate">
            <TextBlock
                Margin="10,0,0,0"
                Text="{Binding Link}" />
        </DataTemplate>
        <!--  Container Style for 1st level of grouping  -->
        <Style x:Key="containerStyle"
            TargetType="{x:Type GroupItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupItem}">
                        <!--
                            Here, we tell that each group of item will be placed under Expander control,
                            and this expander control will by default will have style we defined in above code.
                        -->
                        <Expander x:Name="ComboExpander"
                            Header="{TemplateBinding Content}"
                            HeaderTemplate="{TemplateBinding ContentTemplate}"
                            IsExpanded="False">
                            <ItemsPresenter />
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <StackPanel>

            <ComboBox
                Grid.Row="0"
                Width="300"
                Height="30"
                Margin="109,0,109.4,0"
                ItemTemplate="{StaticResource URLTemplate}"
                ItemsSource="{Binding Source={StaticResource GroupedData}}">
                <ComboBox.GroupStyle>
                    <GroupStyle
                        ContainerStyle="{StaticResource containerStyle}"
                        HeaderTemplate="{StaticResource GroupHeader}" />
                </ComboBox.GroupStyle>
                <ComboBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ComboBox.ItemsPanel>
            </ComboBox>

            <local:EnhancedComboBox
                CollapsedItemNumber="3"
                GroupingMemberPath="GroupName"
                HeaderTemplate="{StaticResource GroupHeader}"
                ItemTemplate="{StaticResource URLTemplate}"
                ItemsSource="{Binding URLs}" />
        </StackPanel>
    </Grid>
</Window>